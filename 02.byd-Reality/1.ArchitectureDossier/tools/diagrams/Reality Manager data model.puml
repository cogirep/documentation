@startuml Reality Manager data model

title

Beyond : Reality Manager

BY-1747, BY-1762, BY-1763, BY-1981,
BY-2009 -> BY-2014

end title

' hide the spot
' hide circle

' avoid problems with angled crows feet
' skinparam linetype ortho


' https://gist.github.com/QuantumGhost/0955a45383a0b6c0bc24f9654b3cb561

' uncomment the line below if you're using computer with a retina display
' skinparam dpi 300
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define foreign_key(x) <b>x</b>
!define unique(x) <color:green>x</color>
!define not_null(x) <u>x</u>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes

' disposition du diagramme

Table(company, "company") {
  primary_key(pk_id) BIGSERIAL
  ---
  not_null(unique(code)) TEXT
  not_null(isDeleted) BOOLEAN <default: false>
}
note bottom of company
  Code : identifiant technique partagé par les produits
  - La référence étant dans Beyond Manager
  - La récupération des informations complémentaires sur les compagnies
  se fait via une API de BYD MGR

  Todo :
  Ajouter les hiérarchies de compagnies ?

end note

Table(account, "account") {
primary_key(pk_id) BIGSERIAL
---
'foreign_key(pk_fk_companyid) BIGINT
---
not_null(unique(email)) TEXT
'not_null(firstname) TEXT
'not_null(lastname) TEXT
'unique(providerUserId) TEXT
not_null(status) BINGINT
}
note top of account
  En tant qu'utilisateur
  Je suis rattaché à une et une seule compagnie

  - La récupération des informations complémentaires sur les utilisateurs
  (prenom/nom) utiles sur RTY MGR se fait via une API de BYD MGR

  Todo :
  Ajouter des préférences utilisateur ?
end note

Table(role, "role") {
  primary_key(pk_id) BIGSERIAL
  ---
  not_null(unique(label)) TEXT
  not_null(description) TEXT
  not_null(status) BINGINT
}
note right of role
  Il s'agit des des rôles dans
  REALITY MANAGER & REALITY
  - Admin RTY,
  - Admin RTY Délégué,
  - Utilisateur,
  - etc...
  
  En tant qu'administrateur RTY je peux :
  - créer des utilisateurs (Dans BYD MGR via une API)
  - créer des compagnies (Dans BYD MGR via une API)
  - créer des profils applicatifs
  - affecter des profils applicatifs à des utilisateurs
  - donner les droits d'administration délégué sur une compagnie

  En tant qu'administrateur délégué d'une compagnie, je peux :
  - créer des utilisateurs rattaché à cette compagnie
  - affecter des profils applicatifs à des utilisateurs des compagnies
  - donner les droits d'administration délégué sur cette compagnie

end note

Table(permission, "permission") {
  primary_key(pk_id) BIGSERIAL
  ---
  not_null(unique(code)) TEXT
  not_null(unique(label)) TEXT
  not_null(description) TEXT
  not_null(status) BINGINT
}

Table(rolePermission, "role_permission") {
  foreign_key(pk_fk_roleid) BIGINT
  foreign_key(pk_fk_permissionid) BIGINT
  ---
  not_null(status) BINGINT
}

Table(companyRoleAccount, "company_role_account") {
  foreign_key(pk_fk_accountid) BIGINT
  foreign_key(pk_fk_companyid) BIGINT
  foreign_key(pk_fk_roleid) BIGINT
  ---
  not_null(status) BINGINT
}
note top of companyRoleAccount
  Un utilisateur a des profils par compagnie
  dans RTY / RTY MGR

  corolaire : SIXENSE est une compagnie
  c'est la seule à utiliser le rôle Admin RTY
  (ayant la permission d'affecter le rôle d'admin délégué à un utilisateur)
end note

' relationships

account -right[hidden]- company
company -right[hidden]- role

company "1" ||-left-o{ "0..N" account: An account is linked to\none company

company "1" ||-up-o{ "0..N" companyRoleAccount
account "1" ||-up-o{ "0..N" companyRoleAccount
role "1" ||-up-o{ "0..N" companyRoleAccount

role "1" ||-down-o{ "0..N" rolePermission
rolePermission "0..N" }o-down-|| "1" permission


legend bottom
  Zero or One	|o--
  Exactly One	||--
  Zero or Many	}o--
  One or Many	}|--
  -=-=-=-=-=-=-=-
  primary_key("primary key")
  foreign_key("foreign key")
  unique(unique)
  not_null("not null")
endlegend

@enduml
